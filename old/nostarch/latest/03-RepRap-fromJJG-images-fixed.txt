Table of Contents
Finding Design Inspiration	2
Tinkercad	3
Getting Started	3
Building a House	4
Exporting the House	6
Minecraft	6
Create an Awesome Design	7
Mark Your Build	7
Export the Model	8
The Terminal in Windows	9
The Terminal on a Mac	10
The Terminal in Linux	10
Prepare for Extraction	10
Create the STL File	11
Verify the Model	12
OpenSCAD	13
Designing in OpenSCAD	14
OpenSCAD Syntax	14
Common OpenSCAD Object Functions	16
Preparing for Printing	18
Blender	20
Blender Settings	21
Modeling a Pencil Cup	22
Exporting from Blender	30

3
3D Modeling 
Modeling is the process of designing a model for printing. In 3D printing, you’ll often model three-dimensional objects using digital tools alone. You could also combine multiple steps of modeling in physical mediums (paper, clay, and so on), scanning the physical model, and writing code to generate the digital model. The only fixed aspect of modeling is that the output is a file (most commonly, an STL file) that you can feed to the next step in the 3D printing chain.
This book focuses on digital modeling, and in this chapter, I’ll walk you through several useful tools to get you started in 3D printing. There are many 3D modeling tools out there, but since the need for these tools began in industrial and professional environments, many are designed for expert operators at big companies and come with a price-tag to match. Fortunately, animation, 3D printing, and so on have driven demand for these tools in the consumer market. There are now several free, open-source options as well as low-price commercial products that are more approachable for casual or novice designers. 
This chapter starts with some tips for figure out what you want to make. Then, I’ll show you four very different modeling tools to try out. Each tool suits a different audience, from Minecraft, which can be used by anyone who's played a first-person video game, to Blender, which will feel most natural to people who have experience with other professional modeling tools. In-between, we'll try OpenSCAD, which will make most programmers feel right at home, and Tinkercad, which strikes a nice balance between traditional CAD tools and an easy-to-learn web interface. There's no need to learn them all, but give each a try and then pick the one that suits you the best.
Finding Design Inspiration
What you design is entirely up to you! Of course, one source of design ideas is your imagination. Are there things that you've always wanted but have yet to be invented? Sometimes, however, the process of acquiring (or building) a printer, setting it up, and calibrating it can consume so much time and mental effort that by the time you’re ready to design something to print, you’re at a loss. If you find yourself in this situation, explore what others have done on websites like youmagine.com or cubehero.com for inspiration.
The world around you can also be an endless source of inspiration. Just take a look at the stuff on your desk! When looking at real-world objects, try to imagine the basic geometric solids (cubes, spheres, pyramids, and so on) that they are composed of, and sketch out on paper how you might re-create these things.
If you look to existing objects, you’ll probably find that you need replacement parts for things around the house that have been broken or that simply have parts missing. This might include game pieces, dishwasher caps, oven knobs, drawer pulls, and anything else you can imagine. One of the earliest practical uses for 3D printing at home was creating parts that are no longer manufactured, so try modeling that missing checker piece or knob!
3D modelers often create mashups, as well. Many designs you'll find online were made by combining two or more existing models, either in-whole or along with custom-designed parts, to create hybrid objects. Some of these objects are just for fun, but others meet a genuine need for parts that don’t exist either due to low demand—too low to justify mass-production—or licensing reasons. This is one area where open-source designs shine because they can be combined, modified, and shared without fear of violating patents or copyright agreements. 
Whatever you come up with, in this chapter, you’ll explore some tools that can help you turn your ideas into a model that you can bring into the physical world through 3D printing.
Tinkercad
Tinkercad (http://tinkercad.com) is a more conventional CAD tool, but it’s still a lot more approachable than professional CAD software. It also has the added bonus of running completely inside a web browser, which makes it compatible with almost every modern computer. The downside is that you can only use Tinkercad when an Internet connection is available.
Tinkercad is subscription-based, though there is a free subscription level with plenty of features to get you started. (In fact, as long as you use it only for personal projects, the free version might be all you ever need.) Tinkercad also has a lot of neat features geared toward casual CAD users. For example, it makes importing and exporting files of different formats easy (including files from Minecraft!), and it provides an excellent tutorial system that explores all of Tinkercad’s capabilities.
Getting Started
First, you’ll need to create an account. Point your browser at http://tinkercad.com and click Sign up for a free account. There are no surprises here: enter your information, and click Sign up to complete the process. (Don’t forget to read the Terms and Privacy Policy first!) Once you log in, Tinkercad provides a dashboard view that displays the models you've created. Click Create a new design to get started.
If you’ve ever used CAD or 3D design software Tinkercad's controls will seem familiar to you, but in case you’re new to CAD, I’ll go over the basics. First, let’s look at the workplane, shown in Figure 3-1Figure 3-4.
Figure 3-4: Tinkercad’s workplane

I recommend using a mouse, rather than a trackpad, to navigate in Tinkercad. To tilt and pan the workplane, left-click and drag your mouse anywhere an object doesn’t exist on the plane. To slide the view, hold down the Shift key while clicking and dragging with the mouse. Use the scroll wheel on the mouse to zoom in and out.
To add a shape to the model in Tinkercad, click it once to select it from the list on the right, and then move your mouse over the workplane. The shape should follow your mouse, and when you click again, the shape will be placed on the workplane. The new shapes you create this way will start with a default size of around 20 mm wide and a default color, and once you place shape, the Inspector view (Figure 3-2Figure 3-5) appears. 
Figure 3-5: Tinkercad’s Inspector view, with hole mode activated

The Inspector view lets you select the color and toggle the Hole attribute, which makes an object have a subtractive effect on the model. For example, if you put a hole object inside of a non-hole object, and then join the two, the result will be that the solid object becomes hollow (, as in Figure 3-3)6.

Figure 3-6: Here, I’ve joined a sphere in hole mode with a cube to carve out a rounded chunk of the cube.


Building a House
Let’s build a little house to get a feel for how Tinkercad works. Remember when I said to start thinking about the things you see in the real world as the basic solids (cubes, spheres, and so on) that they are made of? If you want to build a house, think about it in terms of those shapes. My house is pretty much two shapes, a cube and a pyramid, so start by placing these two shapes on the workplane (as in Figure 3-4)Figure 3-7.
Figure 3-7: This simple house will use a pyramid for the roof and a cube as the base.

Now, let’s place the roof on the house. Left-click the roof object, and small handles should appear around the shape’s perimeter. The white handles at the corners will scale the shape on two sides at once. The black handles will scale a single side only. There is also a black cone that appears above the object; this is used to raise or lower the shape in the Z axis. Use this cone to raise the roof so it's higher than the top of the box shape (Figure 3-5Figure 3-8).
Figure 3-8: Picking up objects in Tinkercad

Notice that Tinkercad displays the distance you've moved the object as you drag it. This is very helpful, and in our case, we know the box is a 20 mm cube because we haven’t changed its size from the default. We can use this information to raise the roof to just the right height to sit on top of the cube. Now click anywhere inside the roof itself, drag it so that it is over the cube, and use the black cone again to lower it on to the top of the cube if necessary. 
Note: You can also use the arrow keys to move an object in precise steps, which is sometimes easier or faster than using the mouse to line things up. The size of these steps (and all object movements) is set by the snap grid setting in the lower-right corner of the screen.
Once the roof is on the house, you can turn these two shapes into a single object to make sure they stay together with the Group button at the top-right of the screen. Select one object, hold down the Shift key, and select the second object. With both objects selected, click the Group button. The cube and the pyramid should become one object and change to be the same color (Figure 3-6Figure 3-9). Now, any changes to location or size will affect both the roof and the block as one. 
Figure 3-9: Once you group two shapes, they become a single unit that you can manipulate all at once.

When you’re done with any design, you should combine all of its shapes together in this way before exporting it for printing. Some 3D printer software will complain if the shapes are not joined together, while others will guess (sometimes incorrectly) at what you want them to do with the different shapes. In either case, the results can be unpredictable, so the safest thing to do is to connect them deliberately yourself. If you decide later that you want to change them independently, you can use the Ungroup button to reverse this marriage of shapes.
Right now, your little house is a solid block of stuff, which is hard to live in. Most houses need a way to get in and an inside to get into! To fix this, use a shape with the hole property to carve out the inside as well as add an entrance. You’ll want to get the roof out of the way to make those things easier, so select the house, click the Ungroup button to separate the roof from the box, and then slide the roof out of the way for now.
Add a new cube to the workplane. Using the white corner handle, reduce this cube’s width and length (X and Y size) so that it fits inside the first cube you created, but leave a few millimeters for the walls. If you used the default 20 mm size for the first cube, 16 mm is a good size for this second cube. Make the height a few millimeters taller than the first cube; you’ll use this extra height as a handle so the new cube doesn't get lost inside the solid box. In the Inspector view, select the Hole property, and then drag this new cube inside of the old one so that it is in the center (Figure 3-7Figure 3-10).
Figure 3-10: Creating the inside of the house with a smaller cube in hole mode

Using the black cone, raise the second cube so that it’s 3 mm above the workplane. This will leave a floor in the house, which any occupants would appreciate! Finally, with the second cube still selected, shift-click the outside of the original cube and click the Group button on the top-right of the screen. This will combine the original solid box with the “hole” box and carve out the inside of your little house (Figure 3-8Figure 3-11).
Figure 3-11: Now our house-to-be has an inside!

Now you can put the roof back on as described earlier, and since you don’t have any openings, the house should look as it did in Figure 3-69. Be sure to group the shapes when you’re done!. 
Of course you still need a way to get in, and some windows would be nice. Using what you now know about creating holes, carve out a doorway and some nice windows. Be sure to leave enough material behind to support the structure since the holes will be empty (unless you have a printer that can print glass too—that would be cool!).
Figure 3-13: The finished house, complete with windows and a door

Exporting the House
Once you’re happy with your design, export it for printing from Tinkercad. Click the Design menu, then select Download for 3D Printing. When a dialog box asks you to select a format, click STL, and the file you need for printing should download. Tinkercad has a lot of other options for playing with your design as well. You can submit it directly from Tinkercad to a 3D printing service, or you could even export it in a format suitable for importing into Minecraft.
Note: Once you select a format, the dialog box remains open, but that doesn’t mean the download didn’t work. Check the directory where you saved the file to make sure before you try again.
Tinkercad does a lot to make 3D design easy and convenient for beginners and convenient casual users. Needing a constant Internet connection reduces that convenience sometimes, and performance can be intermittent, but Tinkercad’s ease-of-use of and its overall convenience often outweigh these disadvantages.
Minecraft
You’ve probably heard of the game called Minecraft, but I bet you never considered it a CAD tool. In fact, it may be the world’s most popular piece of CAD software, and it’s certainly the best collaborative design tool created yet. Minecraft is often described as “electronic LEGO blocks,” and like LEGO, you can build just about anything out of the cubes that make up the Minecraft world.
You’ll need a licensed copy of Minecraft to use it to create models for 3D printing. Mojang, the creator of Minecraft, has demonstrated great interest in making Minecraft available to educators, so hopefully in the future there will be a version of Minecraft available to up-and-coming designers at no cost (or even better, a truly Open-Source version!). For now, however, you’ll have to buy your own copy. Once you have Minecraft, here’s how to create a printable model.
Create an Awesome Design
If you’re new to Minecraft, you're in for a treat. In addition to Survival Mode (which works like a traditional game), there is another way to play called Creative Mode. In Creative Mode, you are free to build without fear of death or scarcity of supplies. All blocks are available to you in an infinite supply. We’ll use Creative Mode for CAD work. 
My advice for creating your first printable model in Minecraft is to use blocks made of sand. This might seem constrictive, as sand blocks only work when stacked directly on top of one-another, but that's precisely the point. Models with overhang (parts that project out of the sides of the model above the first layer) are a challenge for most current 3D printers, but I haven’t been able to create a model with sand in Minecraft that actually has overhang problems. Once you get the hang of what your printer is capable of, you can move on to blocks that allow more complex designs.
I also suggest building something square and fairly large because the models that come out of this process are very low-resolution compared to what most printers can output. Designing something large means you’ll have less scaling-up to do before printing, and the resulting print will have a smoother appearance. Of course, keep it small if you want an 8-bit look, and scale the heck out of it later!
Mark Your Build
Once you complete your design, you’ll need to place some markers inside the Minecraft world to tell the next step exactly what portion of the world to export as a model. These markers are stacks of a special sequence of blocks at two points that define the borders of what you want to print.
The stacks define both the rectangle (X and Y axis) around what should be printed and the cube to be printed by defining the bottom and top of the model (the Z axis). You’ll place one marker at a level that defines the bottom of the model and one high up in the air to define the top. I recommend including some of the base (the ground the model is built on) in the bottom of the model and extending the top above the top of what you want printed. Including some ground blocks with the first marker provides a solid base for the model to be printed on, making it less likely to become detached during the printing process. Keeping the second marker well above the top of the model helps you avoid accidentally cutting of the top, and any empty space above the model will simply be ignored.
Once you've selected the location for the two markers, create them by building a stack containing the following blocks in this order: diamond, gold, iron. Place the first stack at one corner of the area you want to print, and place it a few blocks below the ground the model is built on. You might have to dig a little (Figure 3-10), as in Figure 3-1.
Figure 3-1: Digging to place the diamond, gold, iron marker

Build a stack of blocks that aren’t diamond, gold, or iron diagonal from the first marker to define a rectangle around what you want to print. Once that stack is above your model, place the second marker stack up on top, and remove the blocks below the marker.
Figure 3-2: A complete Minecraft model. Note the two stacks of iron, gold, and diamond.

Prod: possible to label the two block stacks?
Export the Model
Now we need to leave the Minecraft world for a little bit and set up some tools that will allow us to export the model.: Python and Git. If you don't already have thesePython (or are unsure), refer to Appendix A https://wiki.python.org/moin/BeginnersGuide/Download for instructions on verifying and, if necessary, installing it.these tools.
Is git actually required at this point? Wouldn't it be easier to tell the reader to download the zip of the workspace instead? i.e. https://github.com/codys/minecraft.print/archive/master.zip /GSH
I wasn't sure if downloading the zip would work reliably (github has changed how this works when I originally wrote the chapter).  That said I agree that if downloading an archive is an option that simplifies this considerably and I'm OK with going that route for the book. /JJG
@Jason: This sounds like a good idea to me. Could you try it out, see what you think, and if it seems easier, make the change? /JG
@JG: re-worked to skip the git steps /JJG
Prod: confirm Appendix references above and below
I realise that minecraft.print has the benefit that it should be working on all platforms, but the amount of setup required, including having to use the console and such, makes it pretty inaccessible to non-techies.  Have you considered using Mineways as an alternative? (http://www.realtimerendering.com/erich/minecraft/public/mineways/)  I got this up and running pretty much straight away, and could quickly export my model using a few clicks.  The downside is that it is biased towards Windows users – Mac and Linux have to jump through a few hoops sadly. /GSH
I haven't used Mineways but given the objectives of the book I'm inclined to keep this as-is, I don't want to shy away from making the reader “work” for the result, as perseverance is an important skill in working with this technology.  I'm also more comfortable with providing an approach that isn't biased toward closed systems like Windows.
Maybe a “sidebar” pointing to Mineways as an alternative for Windows users who run into trouble with minecraft.print? /JJG
@Jason: I think a boxed aside or note sounds like a great compromise to share a resource that might be easier for some readers. Could you  describe what Mineways is and point readers to the website? JG
@JG: included an note about Mineways below where it seemed to fit, feel free to tweak or annotate apporpirately to make it a boxed aside somewhere among the section below.

Once you have Python and Git working, you’ll need to download a copy of minecraft.print, the Python library that will let us turn our Minecraft build into a 3D model.  You can download the whole thing by pointing your web browser at this URL:
https://github.com/codys/minecraft.print/archive/master.zip

Once downloaded unzip the master.zip file and move the directory it creates somewhere convinient (on the desktop is fine for now).

Note: If you run into any trouble downloading Minecraft.print or have problems getting it to work visit the code repository at https://github.com/codys/minecraft.print and review the README file for current installation instructions and troubleshooting tips.
 You’ll need to use a terminal or console screen to export your model. If you know how to find the terminal already, then jump ahead to “Prepare for Extraction”; otherwise, follow the steps below to open a terminal on your specific operating system.
The Terminal in Windows
Opening a console (also called the Command Prompt) varies from version to version.  On Windows 7, click Start and then type the word “command” in the search box.  Command Prompt should be displayed in the search results. Right click Command Prompt and choose Run as Administrator to open a console with elevated privileges, which will allow you to run the export commands later.
To access a console on Windows 8 use the following steps:
Swipe up to show the Apps screen.
Swipe or scroll to the right to locate the Windows System section heading.
Under Windows System, right click Command Prompt and choose Run as Administrator.
The Terminal on a Mac
The fastest way to open a console on Mac OSX is to click the Spotlight icon in the top-right corner of the screen and type “terminal.”  When the Terminal application appears in the search results, click it to open a console where you can enter the commands below.
The Terminal in Linux
There are many ways to access a console on Linux, and if you're a Linux user, you probably already have a favorite.  If not, you should find a Terminal or Command Line application listed in one of the menus on your Desktop. Most Linux desktop distributions also contain keyboard shortcuts to open a terminal. For example, in the Ubuntu distro, you can open a console by using pressing Ctrl + Alt + T.
Prepare for Extraction
At this point, you should have a console window with a blinking cursor awaiting your command. You’ll need Git and Python for the next step, so if you already have them, you’re set. If not, first, go to http://git-scm.com/book/en/v2/Getting-Started-Installing-Git and follow the instructions there to install Git on your operating system. Then, head to https://www.python.org/downloads/ and follow the instructions there to install Python.
Once you have bothPython set up, head back to the console window, and change directories to where you saved and unzipped Minecraft.print. enter the following command:
git clone https://github.com/codys/minecraft.print.git
This will download the latest version of the Python script you’ll use to export your model from Minecraft. Once Git finishes, you should be able to move to the minecraft.print directory using the cd command.
cd minecraft.print
Chances are you'll need to install some dependencies before you can run the export script. Use easy_install to get numpy and PyYaml.
sudo easy_install numpy
sudo easy_install pyyaml
The Unix command sudo allows regular users to do things that only administrators can do. If you’re using Windows, be sure to run your terminal as an administrator, and enter the commands without sudo.
Now, you should be able to use the export script. Enter python run.py at the command line. If you’re asked to try including a levelname and outputname, then you’re all set! If you see something else, then your Python environment is still missing something, which will take additional troubleshooting. Visit https://wiki.python.org/moin/BeginnersGuide/Download for detailed Python troubleshooting for several operating systems.  Take a look at Appendix X for some Python troubleshooting tips.
Prod: Confirm Appendix X reference above
Create the STL File
Now we’re ready to export your awesome new model! Here's the command you'll need to run:
python run.py world model1
I didn't get any further than this point as I got an error: “ImportError: cannot import name multiarray” - which may be specific to my setup (Cygwin on Windows Vista x64) Despite several attempts at reinstalling numpy.  (Note: I continued the review on the later steps using a model I exported with the Mineways app). /GSH
@Jason: I know you don’t have a windows machine yourself, but could you perhaps borrow a computer to try out the process in Windows and see if you encounter the problem Gary describes? It’s just important to have all the steps work, at least on a system as you describe it, so that readers don’t get frustrated. /JG
This will look at the default Minecraft world file for your model, as marked in previous steps, and generate an STL file named model1.stl. If all goes well, you should see the program output percentages to your console until it’s done running.
python run.py model_world model1.stl
Processing level: model_world
Scanning level for markers...
1.08932461874%
2.17864923747%

...

87.5%
93.75%
100%
Done!
If something is wrong with the markers, or if you created the model in a different world file, and so on, you’ll receive an error. If this happens, go back into Minecraft and double-check your markers. If you created the model in a different world, you can just run the export command again, but with a different world name. 
Note: To make your life is easier, when naming a world you plan to export,  use a short title without spaces or other weird characters.
Once you get the script to run without errors, you should find a file named model1.stl (or whatever you provided for outputname) in the current directory. Let’s take a look at that file and see how it turned out!

Having trouble getting Minecraft.print to work?  Python tools can be tricky, especially on Windows.  In those cases Mineways may be an useful alternative.  Mineways is an application designed for Windows that lets you download and run that can export models from Minecraft.  You can learn more about Mineways here http://www.realtimerendering.com/erich/minecraft/public/mineways/.  Once you've exported an STL file the rest of the steps are the same whether you use Minecraft.print or Mineways.
Verify the Model
Next we need to take a look at the STL file we just created and make sure it’s what you want to print. There are many tools available for viewing STL files, and most will work for previewing the model, but I'll use Meshlab for this example. You can download Meshlab from http://meshlab.sourceforge.net to install it.
Open Meshlab, click File → Import Mesh... and select the model1.stl file you just created. If asked, leave Unify Duplicated Vertices checked and click OK. You should see your Minecraft build rendered as a 3D model (Figure 3-12), as shown in Figure 3-2.
Figure 3-2: This 3D model was generated by minecraft.print. 

Looks like I have some extra stuff in there. If you do, too, fire up Minecraft again and see if you can clean things up. I removed the tower under the high marker and moved the low marker inside the part of the model I wanted to print. The result is a much cleaner model (Figure 3-13), as in Figure 3-3.
Figure 3-3: After cleaning up your build in Minecraft until you’re happy with it, just run minecrat.print again to create a new STL file.

Meshlab is an incredibly powerful tool, but all we need to do right now is review the output from minecraft.print, and it's looking pretty good. This model is ready for slicing, which we’ll cover in Chapter 4. For now, let's take a look at some more traditional design tools, beginning with a simple one called Tinkercad.
OpenSCAD
OpenSCAD is CAD modeling software aimed at programmers or people who are more comfortable writing code to create objects than using a mouse to draw them. OpenSCAD is free and open source, and you can download it for free from http://www.openscad.org/ for Mac, Linux, and Windows. Once you have OpenSCAD installed on your computer, open it up, and I’ll teach you to design your first object. 
The first thing you might notice is that there’s no tool palette or similar controls that you’d find in other CAD applications. This is because you do everything in OpenSCAD by writing code. The OpenSCAD interface is split into three main sections: code, preview, and status (Figure 3-14Figure 3-14). When you start OpenSCAD for the first time, these fields should be blank, but you’ll change that in a moment.
Prod: Let’s annotate Figure 3-14 to correspond to the description above.
Figure 3-14: OpenSCAD’s code, preview, and status panels. The code in the left panel creates the cube on the right.

The code editor panel is on the left, and that’s where you’ll type in the code that tells OpenSCAD what the model looks like. The preview area on the right will display the model as you write the code for it. If there’s no code in the code view, there’s nothing to see in the preview area. The status area on the bottom-right shows messages from the OpenSCAD rendering engine as it runs your code. When you first open the application, this area displays version and copyright information.
Designing in OpenSCAD
Now that you know your way around, let’s start designing something!
Even if you’ve never written a program before, fear not! If you get lost, just make sure that what you’ve typed in the code view matches what’s written in the text; I’ll walk you through the details soon.
Enter cube([10,10,10]); in the code view, and click File4Save to save your work. Name the file cube.scad. Once you save the file, you should see a cube in the preview area, just like in Figure 3-14. Now that there’s something in the preview area, you can use your mouse to examine it by clicking and dragging in the view.
 You can also zoom in and out using the mouse wheel. If you don’t see a cube in the preview area, double-check your code to make sure you entered it correctly, and save the file again. 
OpenSCAD Syntax
 You created a neat little cube in the previous section, but how does OpenSCAD know how to translate your code into a shape? Recall exactly what you typed in the code panel: 
cube([10,10,10]);
Now, let’s look at that code piece-by-piece.
cube
Here, cube is a function, which is a specific instruction that tells OpenSCAD what type of shape to draw. The function name tells OpenSCAD what to draw, but it doesn’t say how to draw it, and that’s where the next piece comes in.
([10,10,10])
 You can pass information, including dimensions, where you want an object to appear on the screen, and so on, to the function using parameters, which go between the parentheses that follow the function name.
In your code, you passed [10,10,10] to the cube function to tell it what size to draw the cube. The values 10,10, and 10 are contained between two brackets ([ and ]), which tells OpenSCAD that this is going to be an array of values. An array is just a list, and the list can have a variable number of elements. Your list has three values, all the number 10. OpenSCAD knows that if a cube function is passed an array of values and the array contains three items, these three items are the X, Y, and Z measurements for the cube, so it renders a cube of 10x10x10 units.
Now you might be wondering, “How does OpenSCAD know where to put this cube?” The cube is placed with its first corner at the origin of OpenSCAD’s universe by default. If you just want to draw a cube and we know what size it should be, OpenSCAD sticks it right in the middle of the world, since you didn’t provide any more specific information about what to do with it.
You’ve just walked through one function, but OpenSCAD has a number of others for drawing basic forms, and the values you can pass vary. Most require some minimum number of values in order to work, and all accept additional optional values that further specify how OpenSCAD should draw the object. Next, you’ll explore some common object drawing functions, their required values, and some of their more interesting optional values. 
Note: You can read complete documentation of all OpenSCAD functions at http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/The_OpenSCAD_Language#Primitive_Solids.
Begin box; important that this come after the previous section, because terminology used is explained there.
Debugging Errors in OpenSCAD
Let’s take a look at the status view. If your code compiled and a cube appeared, you should see a bunch of information about the model and feedback from the compiler about the status of compiling the model, the number of polygons, and so on. Let’s make a small change to the code and see how the status changes. Delete the closing square bracket (]) from the line of code you entered before.
cube([10,10,10);
Now save the file again, and your little cube should be gone. You’ll also notice a few other differences, both in the code view and in the status view. Let’s look at the status first. All the nice messages from the compiler should be replaced with an error—specifically, “ERROR: Compilation failed!” This is telling us that when the compiler tried to read your code, it couldn’t understand it. Well, what’s wrong with your code? Let’s take a look at that next.
You should see a big red box just after the last number 10, which is OpenSCAD’s way of helping us see what’s wrong. In this case, the problem is that we are missing a bracket, and the box shows us where it’s missing from. (In other cases, OpenSCAD might not be able to provide such precise feedback, especially in more complex models. Turn to the status view, and you’ll also see that the compiler output tells us which line the error was found in. Since our whole model is only one line, this isn’t terribly helpful, but when you’re working with a model with hundreds (or thousands) of lines, this is good information to have.
Errors like this are called compilation errors, which means that the code isn’t following the strict rules of OpenSCAD’s programming language.  Compilation errors are usually easier to solve than others, and fixing them often amounts to reading the code to find a typo, a misused function name, or a forgotten character. Other error causes can be more elusive, but in most cases, you’ll still have to review the code step-by-step until you find the source of the problem. This is called debugging, and it will be very familiar to the programmers in the audience. If you’re new to debugging, welcome to the club!
End Box
Common OpenSCAD Object Functions
OpenSCAD has functions like cube(), sphere(), cylinder(), polyhedron(), and so on, which let you draw various solids for your model. But now that you know how to draw an object, how do you move it around? 
Save your cube example again, and then create a new empty project by clicking File 4New. In the new project, we’ll enter some code to translate (or move) a cube around.
translate([25,0,0]){
     cube([10,10,10]);
}
Save this project as translate.scad, and you should see your little 10x10x10 cube again. What has changed might not be immediately obvious, but if you click View 4Show Axis, it should become more clear (Figure 3-15Figure 3-15).
Figure 3-15: Thanks to translate(), our cube is shifted to the right along the X axis.

The translate() function’s job is to move the objects it contains based on the values passed into it. The values you passed to translate() take the same format as the values you pass into the cube() function, and the result is that translate() moves your cube 25 units along the X axis.
Note: For comparison, return to the previous example (cube.scad) and turn on Show Axis. Since we haven’t used translate(), your little cube should be sitting at the origin.
In OpenSCAD, the curly braces contain objects that will be impacted by a function. In this example, the cube() function is contained within the curly braces of the translate() function, and it’s translated as a result. There are a number of functions in the OpenSCAD language that act on other objects in this way, such as scale(), rotate() and mirror(). You can even nest these functions, so that more than one function can be applied to a single object. Make sure your translate.scad file is saved, and create a new project. Now, let’s enter some code that will both translate and rotate our cube.
translate([25,0,0]){
     rotate([0,50,0]){
          cube([10,10,10]);
     }
}
Save this project as nesting.scad, and you should see something like the cube in Figure 3-16Figure 3-16. 
Figure 3-16: Nesting functions allows you to apply multiple actions to one object.

In this example, you’ve created a new cube within the curly braces of a rotate() function, which rotates the cube on its Y axis by 50 degrees. Finally, the rotate() function is contained within the curly braces of a translate() function, which moves everything 25 units along the Y axis.
Preparing for Printing
Finally, to use an OpenSCAD model for printing, you need to render it in a format that can be sliced and fed to a printer. The STL format is preferred, and OpenSCAD makes creating STL files simple.
But let’s try a more ambitious model, something more interesting to print than a cube. How about a snowman?
// union() joins everything together
union(){

     // base (round things don't stick very well)
     cube([20,20,2]);

     // bottom
     translate([10,10,10]){
          sphere(10);
     }

     // middle
     translate([10,10,25]){
          sphere(8);
     }

     // top (head)
     translate([10,10,38]){
          sphere(7);

          // eyes
          translate([-3,-5,3]){
               sphere(2);
          }
          translate([3,-5,3]){
               sphere(2);
          }
         
          // nose
          translate([0,-5,0]){
               rotate([90,0,0]){
                    cylinder(5,2,.1);
               }
          }
     }
}
 The lines that begin with // are OpenSCAD comments, which are notes to other programmers (or yourself) that explain what’s going on inside a program. I used comments here to make it easy to tell which block of code builds each part of the model, so others will know where to make changes to a particular part of the model. (For example, if you want to make the eyes bigger, all you have to do is edit the code under the comment //eyes.) Just remember that everything after the // will be ignored by the OpenSCAD compiler, so don’t include them on a line that represents something you actually want to print. Copy this code into OpenSCAD, save the new project as snowman.scad, and you should see something like the screenshot in Figure 3-17Figure 3-17.
Figure 3-17: The snowman model, complete with a face!

Now, you just need to export your frosty friend for printing! There are two steps:
Click Design4Compile and Render to generate a detailed model of your project. This may take a few minutes.
When the model is generated, click Design 4 Export STL
Select a place to save the STL file, and name it snowman.stl. You should now have an STL file suitable for slicing and printing! If anything goes wrong, review the messages in the status area and look for clues. (The most common error is trying to Export STL before rendering.) Remember that if you make changes to the code, you’ll need to save your changes and render again before you can export a new STL file.
We can construct rich, complex models by using OpenSCAD to create basic shapes and manipulate them in space. Many 3D models published on the Internet include their OpenSCAD source code, so if you can read and understand OpenSCAD code, you can easily customize these objects and incorporate them into your own original designs.
OpenSCAD isn’t for everyone, but it can be a fast, powerful way to create very precise models. If you’re more comfortable with code than with drawing tools or if your model needs to fit in with pieces you’re not going to print (a replacement part, for example), then I recommend giving OpenSCAD a try. You can even use variables and loops to write OpenSCAD programs that generate models dynamically, which can make adapting your models for different purposes or generating custom versions easier.
Blender
Blender is a free, open-source 3D animation program for Linux, Mac, and Windows. It’s a very complete 3D modeling tool, and it’s quite useful for 3D printing as well as creating animations. The learning curve for using Blender may be steep for casual users, but the reward for time spent is significant. Download Blender from http://www.blender.org, open it up, and let's take it for a spin!
By default, Blender starts out with a cube on the workplane (Figure 3-18Figure 3-18). Right-click the cube and hit the Delete key on your keyboard (not Backspace!) to delete it. Blender is nice enough to prompt you to confirm the delete, so click confirm if you want the cube gone.
Figure 3-18: Blender’s default workplane

Blender Settings
Prod: Where reasonable, let’s use flyouts in the Blender section, show the small menus to the side of the workspace screens. AU working on getting cropped control views and naming them to correspond to full-sized images.
Blender wasn’t made to create printable 3D models, so before you get started, you’ll need to prepare it for designing printable objects. First, enable the 3D Print Add-On. Click File4User Preferences, and then click the Addons tab. In the search box, type print (you could also browse through all the options, but that could take awhile), and the Mesh: 3D Print Toolbox addon should appear on the right. Check the checkbox next to the addon, click Save User Settings in the bottom-left corner, and then close the Blender User Preferences window.
You'll also want to change some of the scene settings so you create something sane for 3D printing. From the menu on the right of the main Blender window, click the Scene icon (Figure 3-19). In the scene options, select Metric units. 

Figure 3-19: Blender’s scene options
Finally, scale your dimensions so that you can produce an object that will print safely on almost any 3D printer. Select the object, and press the N key to view the Dimensions menu (Figure 3-20). 
The above says “Select the object” but we haven't yet created something.
By default (at the time of writing) Blender starts with a single cube on the workplane (shown above).  Perhaps the text needs to be more descriptive, i.e.: “Select the default object (cube) that Blender placed on the workplane...”? /JJG
Figure 3-20: The Dimensions menu
Prod: could we show this little screenshot off to the side of the paragraph describing it? 
Set the dimensions to 100mm (or 10cm) for all three dimensions. 
Note: You’ll have an easier time using Blender if you get familiar with the keyboard commands, like the N shortcut you just used. These commands are available via menus, but the menus are so vast and deep that you could spend a lot of time hunting for something. Since Blender is really designed to leverage the keyboard commands heavily, I’ve adopted that behavior here as well.
Now that Blender is all set for creating printable objects, let’s make one!
Modeling a Pencil Cup
For this project, you'll create a nice little cup you can print for your pencils. (If you print it with the right materials on a very clean printer, you could also drink out of it.) Start by dropping a plain old cylinder on the workplane, Blender-style: click Add4Mesh4Cylinder, and a cylinder should appear on the workplane, as in Figure 3-21. 
Was not immediately obvious where the “Add” Menu Option was. The later style of describing where to find the menu would help here. /GSH
@Jason: Could you clarify in response to Gary’s comment? I do agree that if he had some trouble finding the menu, the reader may, as well. /JG
Figure 3-21: This plain cylinder will become our pencil cup.
Prod: Perhaps we could have Figure 3-22 be a flyout from Figure 3-21?
Figure 3-22: Add Cylinder menu
Next, we'll set the fill type for the cylinder to Triangle Fan using the Cap Fill Type menu under Add Cylinder on the left of the screen. We need to edit the object, so click the Object Interaction Mode (Figure 3-23) menu and choose Edit Mode; your cylinder should now change color to indicate it's selected. 
Figure 3-23: The Object Interaction Mode Menu
You're not ready to select anything yet, so press the a key to toggle the selection. This is a handy way to get yourself out of trouble should you select part of an object on accident. 
The pencil cup needs a hole at the top, but before you create that hole, switch the object view to Wireframe. Click Viewport Shading (Figure 3-24), and select Wireframe.
Figure 3-24: Switching to wireframe mode
Prod: Both of these images should be part of Figure 3-24; zoomed in shot should be a flyout 








With the cylinder in Edit Mode and the view set to Wireframe, the workplane should look something like Figure 3-19Figure 3-25.
Figure 3-25: Our cylinder in Wireframe mode.

Now, remove the top of the cylinder. Right-click in the center of the top of the cylinder (where the lines come together) to select it. When it's selected properly, all of the wires on the top of the cylinder should change color. Hit the delete key, and Blender should ask what exactly you'd like to delete. In this case, select Vertices from the confirmation menu and the top of the cylinder should disappear.
Changing how you view the cylinder makes it easier to finish the model. Click View4Front (the View menu is in the lower-left corner of the screen); this should whip the cylinder around so you're looking at the side. Next, click View4View Persp/Ortho to toggle between perspective view, which shows the object in three dimensions, and Orthogonal view, which renders the image flat. Choose orthogonal view. Assuming you’re using a flat screen (unless you have a fancier setup than I do), this view should make your life easier for the moment. At this point you should be looking at something like Figure 3-20Figure 3-26.
Figure 3-26: An orthogonal view of the cylinder

Use the mouse wheel to zoom in; you're focusing on the cylinder, so there’s no need for all that empty space. If your screen doesn't look like the one above, review each step so far until it does so you can follow along from here. If everything looks good, let's add some shape to our pencil cup!
With the mouse over the cylinder, press ctrl-r (lowercase, not caps!); a horizontal purple line should appear.  Scroll the mouse wheel slowly, and the number of lines should grow to two, then three, and so on. Scroll up until you see three purple lines, left-click to lock the number of lines, and press enter to lock them into place. This operation is called subdividing, and it's useful for taking a basic solid and manipulating sections of it, which you'll do next.
Note: If you move the mouse up or down during this process you'll move the lines as well. This isn’t a big deal, but if you want your results to look just like my end result, move the mouse back until the initial line is in the middle of the cylinder's height.
Press the a key to deselect the cylinder if it's still selected, then press b to turn your cursor into a crosshair. Using this crosshair cursor, drag a rectangle around the bottom of the cylinder to select the row of dots at the bottom of the cylinder.
With these selected, press s to alter the size of this section. Get creative, but keep in mind that this part must be wide enough to support the pencil cup yet small enough to fit on the printer you want to print it out on. (100mm is a safe bet for most printers.) When you're happy with the size, left-click the mouse to set your changes in place, and press a again to make sure the selection is released. Next, repeat this process for the top row and the three rows you added earlier until you have a shape you like. You can see one possibility in Figure 3-21Figure 3-27. 
Figure 3-27: Depending on how you adjust those sizes, your cylinder might look more like a vase.

You'll be carving out the inside of the shape in order to make room for whatever you want to put inside, but you need to leave some room between the empty inside and the outside walls so the cup has enough plastic to hold itself together. 
Note: As long as the hole on the inside doesn't touch the outside wall, you'll be safe, so just don't pinch the middle section too much. If you run out of room in the next step, come back to this step to widen the cup.
Now that you have the outside shape, let's make the inside. The first step of this process is to extrude the outside wall of the shape inward so you have a lip at the top of the vase. Use the A key again to remove any existing selection, and then use B to select the row of dots at the top of the cylinder. This is where it gets weird. With the top row selected, press E (for extrude), and then press enter. Next, type S to switch to size mode, type .9 on the keyboard, and press enter again. You won't see much change at this point due to the perspective, but if you click and drag slowly with the middle mouse button to tip the viewpoint a little, you should see that you've created a thin lip around the top edge of the cylinder (Figure 3-22)(Figure 3-28). 
Figure 3-28: The cup, after extruding the lip inward

Before continuing, use the View menu to switch back to Front view. Now without deselecting the newly extruded lip, again press the E key to begin extruding again, and drag the mouse down to extend this edge into the body of the pencil cup. Drag down until you meet the next row of dots from your subdivision operation, and then left-click to set it. This extrusion may go outside of the body of the vase, so to clean this up, press S and move the mouse up or down to size the extrusion until it's inside of the vase about the same amount as it is at the top.
Repeat this process until you're a few millimeters from the bottom of the vase. Now you need to  form the bottom of the vase. With the extruded row still selected, press E, and then press enter. Next, click Merge under Remove: in the left-side menu, and select at center. This should bring the points we have selected together at the center of the object. To see this effect more clearly, use the center mouse button to tilt the workspace slightly so you can see inside the vase, as in Figure 3-23Figure 3-29.
Above it should be clarified that the Merge option is under the Tools panel./GSH
@Jason: Could you clarify the steps above, as Gary described? /JG
Figure 3-29: The wireframe of our vase, complete with an enclosed bottom

It’s time to see what this will look like when you print it! Switch the object menu from Edit mode to Object mode, and then switch the view from Wirefame to Solid, and you should see something like Figure 3-24Figure 3-30. 
Figure 3-30: The completed vase model, shown as a solid

Use that 3D Print Toolbox we installed during the setup stage to check out your model and identify potential problems. Click Print3D in the Tools panel on the left to expand the Toolbox. Understanding its myriad of features is an exercise I leave to you; for now, let’s just get some quick feedback on your model. Click the Check All button, and you'll get a summary of possible problems with the model in categories like “Non Manifold Edges,” “Zero Faces,” and “Overhangs”. 
In Blender v2.72 the 3D Printing options are now in a tab called “3D Printing”./GSH
@Jason: If you want to stick with an older version of Blender, that can work (as long as it’s still available to download), but could you explain to readers why you chose to use something older at the beginning of the section? It’s just helpful to be up front about decisions like that.
Otherwise, if you think readers will be using the most recent version of Blender, could you update accordingly? /JG
If your model has any of these problems, clean them up before continuing. This simple model should have gotten a clean bill of health, though, so I'll continue on with the export.
Exporting from Blender
The final step in preparing your Blender model for printing is to export it to an STL file. Click File4Export4STL, and a dialog box should appear that allows you to name the file and choose a location to save it. In addition to these typical bits of information, there is one more critical thing you need to do to get a model we can feed to the slicing software.
At the lower-left corner of the dialog is a field where you can set the scale of the exported file. This must be set to 1000 in order to ensure the size (in millimeters) of the model exported matches the size of the model you created. Ignoring this will create a file that contains a model that is orders of magnitude off in size, and most slicing software will be unable to process the file. Finally, click Export STL to save the file.

In this chapter, we looked at a few applications that demonstrated a variety of ways to go about the 3D modeling process. What type of tool you choose is up to you, and may change depending on the type of modeling project you are working on. They key requirement for modeling software is that the output is an STL file that can be fed to the slicing software, which is the next step in the 3dD printing process—and by no coincidence, the focus of the next chapter of this book as well.
